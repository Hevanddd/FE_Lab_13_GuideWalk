{"version":3,"file":"index.ie11.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/unique.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/deepMerge.ts","../src/utils/isSameError.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isBoolean.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/isPrimitive.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/getIsFieldsDifferent.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/shouldRenderBasedOnError.ts","../src/utils/onDomRemove.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (unmountFieldsStateRef) {\n    return unmountFieldsStateRef.current[name];\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\n              .length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject((unmountFieldsStateRef || {}).current || {}),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (!isObject(target) || !isObject(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    if (isObject(targetValue) && isObject(sourceValue)) {\n      target[key] = deepMerge(targetValue, sourceValue);\n    } else {\n      target[key] = sourceValue;\n    }\n  }\n\n  return target;\n}\n","import isObject from './isObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types = {}, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  Object.keys(error.types || {}).length === Object.keys(types).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => types[key] === value,\n  );\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? ((fields[name] as Field).options || [])[0].ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, unmountFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldValues, InternalFieldName } from '../types/form';\n\nexport const getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(value, key, isObject(values)))\n    .flat(Infinity);\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath<TFieldValues>(\n        fieldName,\n        value as TFieldValues,\n      ).forEach((name: string) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isUndefined from '../utils/isUndefined';\nimport isArray from '../utils/isArray';\n\nexport default function getIsFieldsDifferent(\n  referenceArray: unknown[],\n  differenceArray: unknown[],\n) {\n  if (\n    !isArray<any>(referenceArray) ||\n    !isArray<any>(differenceArray) ||\n    referenceArray.length !== differenceArray.length\n  ) {\n    return true;\n  }\n\n  for (let i = 0; i < referenceArray.length; i++) {\n    const dataA = referenceArray[i];\n    const dataB = differenceArray[i];\n\n    if (\n      isUndefined(dataB) ||\n      Object.keys(dataA).length !== Object.keys(dataB).length\n    ) {\n      return true;\n    }\n\n    for (const key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const modeRef = React.useRef(modeChecker(mode));\n  const {\n    current: { isOnSubmit, isOnAll },\n  } = modeRef;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    current: { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange },\n  } = React.useRef(modeChecker(reValidateMode));\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(\n    () => !isUnMount.current && render({}),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = (value as string).includes(\n                  checkboxRef.value,\n                )),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          getIsFieldsDifferent(\n            get(getValues(), getFieldArrayParentName(name)),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          unmountFieldsStateRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            if (error) {\n              set(errorsRef.current, name, error);\n            } else {\n              unset(errorsRef.current, name);\n            }\n\n            return !error;\n          })\n          .every(Boolean);\n\n        reRender();\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(field, get(data, fieldName));\n\n          if (shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n\n      if (!shouldUnregister) {\n        unmountFieldsStateRef.current[name] = value;\n      }\n\n      return true;\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          name === '' ||\n          watchFieldsHookRef.current[key].has(name) ||\n          watchFieldsHookRef.current[key].has(getFieldArrayParentName(name)) ||\n          !watchFieldsHookRef.current[key].size\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation =\n            !isOnAll &&\n            skipValidation({\n              isBlurEvent,\n              isReValidateOnChange,\n              isReValidateOnBlur,\n              isSubmitted: isSubmittedRef.current,\n              ...modeRef.current,\n            });\n          let shouldRender = setDirty(name) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(touchedFieldsRef.current, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(touchedFieldsRef.current, name, true);\n            shouldRender = true;\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return shouldRender && reRender();\n          }\n\n          if (resolver) {\n            const { errors } = await resolver(\n              getValues() as TFieldValues,\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = isValidRef.current;\n            isValidRef.current = isEmptyObject(errors);\n\n            error = (get(errors, name)\n              ? { [name]: get(errors, name) }\n              : {}) as FlatFieldErrors<TFieldValues>;\n\n            if (previousFormIsValid !== isValidRef.current) {\n              shouldRender = true;\n            }\n          } else {\n            error = await validateField<TFieldValues>(\n              fieldsRef,\n              isValidateAllFieldCriteria,\n              field,\n              unmountFieldsStateRef,\n            );\n          }\n\n          renderWatchedInputs(name);\n\n          if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n            reRender();\n          }\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, unmountFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getFieldValue(fieldsRef, name, unmountFieldsStateRef),\n        }),\n        {},\n      );\n    }\n\n    return getFieldsValues(fieldsRef, unmountFieldsStateRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n\n          [fieldsWithValidationRef, validFieldsRef].forEach((data) =>\n            data.current.delete(field.ref.name),\n          );\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched ||\n            readFormStateRef.current.isDirty\n          ) {\n            isDirtyRef.current = !isEmptyObject(dirtyFieldsRef.current);\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        unmountFieldsStateRef,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn('📋 Field is missing `name` attribute:', ref);\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+]\\.\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\". https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && option.ref === ref;\n          })\n        : ref === field.ref)\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(unmountFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : unmountFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          unmountFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = isValidRef.current;\n\n          isEmptyObject(error)\n            ? validFieldsRef.current.add(name)\n            : (isValidRef.current = false);\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      callback: SubmitHandler<TSubmitFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = getFieldsValues(\n        fieldsRef,\n        unmountFieldsStateRef,\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                unmountFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                unset(errorsRef.current, name);\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await callback(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    if (values) {\n      defaultValuesRef.current = values;\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n      fieldsRef.current &&\n        process.env.NODE_ENV === 'production' &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (\n              process.env.NODE_ENV !== 'production' &&\n              prop === 'isValid' &&\n              isOnSubmit\n            ) {\n              console.warn(\n                '📋 `formState.isValid` is applicable with `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n              );\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    ...(resolver ? { validateSchemaIsValid: validateResolver } : {}),\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport unique from './unique';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return unique(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\n\nexport default <T>(data: T[], from: number, to: number): (T | undefined)[] => {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined as any;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(isArray(value) ? value : [value || undefined]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): undefined[] | undefined =>\n  isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean(value: any) {\n  if (isObject(value)) {\n    const object: any = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport const filterBooleanArray = <T>(value: T): T[] =>\n  isArray(value)\n    ? value.map(mapValueToBoolean).flat()\n    : mapValueToBoolean(value);\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport isObject from './utils/isObject';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport { filterBooleanArray } from './utils/filterBooleanArray';\nimport unique from './utils/unique';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n} from './types/form';\n\nconst appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...(isObject(value) ? value : { value }),\n});\n\nconst mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    reRender,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    dirtyFieldsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateSchemaIsValid,\n    renderWatchedInputs,\n    getValues,\n  } = control || methods.control;\n  let shouldRender;\n\n  const getDefaultValues = () => [\n    ...get(\n      get(fieldArrayDefaultValues.current, getFieldArrayParentName(name))\n        ? fieldArrayDefaultValues.current\n        : defaultValuesRef.current,\n      name,\n      [],\n    ),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setField] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues() || {}, name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods.control) {\n      console.warn('📋 useFieldArray is missing `control` prop.');\n    }\n\n    if (!name) {\n      console.warn('📋 useFieldArray is missing `name` attribute.');\n    }\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid({\n        [name]: fieldsValues,\n      });\n    }\n  };\n\n  const shouldRenderFieldArray = (shouldRender?: boolean) => {\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty ||\n      readFormStateRef.current.isValid\n    ) {\n      shouldRender = true;\n    }\n\n    renderWatchedInputs(name);\n\n    shouldRender && !isWatchAllRef.current && reRender();\n  };\n\n  const resetFields = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ) => {\n    if (\n      readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields\n    ) {\n      isDirtyRef.current =\n        isUndefined(flagOrFields) ||\n        getIsFieldsDifferent(\n          flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n          get(defaultValuesRef.current, name, []),\n        );\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      dirtyFieldsRef.current[name] = [\n        ...(dirtyFieldsRef.current[name] || fillEmptyArray(fields.slice(0, 1))),\n        ...filterBooleanArray(value),\n      ];\n      isDirtyRef.current = true;\n      shouldRender = true;\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    shouldRender = false;\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = prependAt(\n        get(errorsRef.current, name),\n        emptyArray,\n      );\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prependAt(\n        touchedFieldsRef.current[name],\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      dirtyFieldsRef.current[name] = prependAt(\n        dirtyFieldsRef.current[name] || [],\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    setFieldAndValidState(removeArrayAt(fieldValues, index));\n    resetFields(removeArrayAt(fieldValues, index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        removeArrayAt(get(errorsRef.current, name), index),\n      );\n\n      if (!unique(get(errorsRef.current, name, [])).length) {\n        unset(errorsRef.current, name);\n      }\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(\n        touchedFieldsRef.current[name],\n        index,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = removeArrayAt(\n        dirtyFieldsRef.current[name],\n        index,\n      );\n\n      if (!dirtyFieldsRef.current[name].length) {\n        delete dirtyFieldsRef.current[name];\n      }\n\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      let fieldIndex = -1;\n      let isFound = false;\n      const isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        const isLast = fieldIndex === fields.length - 1;\n        const isCurrentIndex =\n          (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (const key in fields[fieldIndex]) {\n          const currentFieldName = `${name}[${fieldIndex}].${key}`;\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n\n    setFieldAndValidState(\n      insertAt(\n        fieldValues,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields(insertAt(fieldValues, index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = insertAt(\n        get(errorsRef.current, name),\n        index,\n        emptyArray,\n      );\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insertAt(\n        touchedFieldsRef.current[name],\n        index,\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = insertAt(\n        dirtyFieldsRef.current[name],\n        index,\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      swapArrayAt(get(errorsRef.current, name), indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      swapArrayAt(dirtyFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const move = (from: number, to: number) => {\n    shouldRender = false;\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      moveArrayAt(get(errorsRef.current, name), from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      moveArrayAt(dirtyFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    const defaultValues = get(fieldArrayDefaultValues.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValues.current, name, defaultValues);\n    }\n\n    if (isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          reRender();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [\n    fields,\n    name,\n    fieldArrayDefaultValues,\n    reRender,\n    fieldsRef,\n    watchFieldsRef,\n    isWatchAllRef,\n  ]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n\n    set(fieldArrayDefaultValues.current, name, memoizedDefaultValues.current);\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [fields, name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types/form';\nimport { ControllerProps } from './types/props';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    isSubmittedRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    reRender,\n    fieldsRef,\n    fieldArrayNamesRef,\n    unmountFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(unmountFieldsStateRef.current, name)) && isNotFieldArray\n      ? unmountFieldsStateRef.current[name]\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n  const isSubmitted = isSubmittedRef.current;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (isUndefined(value)) {\n      console.warn(\n        '📋 Controller `defaultValue` or useForm `defaultValues` is missing.',\n      );\n    }\n\n    if (as && render) {\n      console.warn('📋 Should use either `as` or `render` prop.');\n    }\n\n    if (!control && !methods.control) {\n      console.warn('📋 Controller is missing `control` prop.');\n    }\n  }\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn('📋 Field is missing `name` prop.');\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n    }\n  }, [fieldsRef, rules, name, onFocusRef, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (\n      readFormStateRef.current.touched &&\n      !get(touchedFieldsRef.current, name)\n    ) {\n      set(touchedFieldsRef.current, name, true);\n      reRender();\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","import { Ref, MutationWatcher } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: VoidFunction,\n): MutationWatcher {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport {\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types/form';\nimport { DeepPartial } from './types/utils';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n  const {\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n  const nameRef = React.useRef(name);\n\n  const updateWatchValue = React.useCallback(\n    () =>\n      setValue(\n        watchInternal(nameRef.current, defaultValueRef.current, idRef.current),\n      ),\n    [setValue, watchInternal, defaultValueRef, nameRef, idRef],\n  );\n\n  if (process.env.NODE_ENV !== 'production' && !control && !methods.control) {\n    console.warn('📋 useWatch is missing `control` prop.');\n  }\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    const watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(nameRef.current, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    nameRef,\n    updateWatchValue,\n    watchFieldsHookRenderRef,\n    watchFieldsHookRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","Array","isArray","isObjectType","isNullOrUndefined","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","_a","_c","__read","val","undefined","filter","Boolean","obj","defaultValue","unique","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","SELECT","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","unmountFieldsStateRef","field","current","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","__spread","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isSameRef","fieldValue","search","output","name_1","isString","startsWith","find","deepMerge","target","source","targetValue","sourceValue","transformToNestObject","error","_b","types","message","every","RegExp","validationData","isRegex","isValidElement","getValidateError","isMessage","isBoolean","validateAllFieldCriteria","errors","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","exceedMin","_d","maxValue","maxMessage","_e","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","Date","_f","maxLengthValue","_g","minLengthValue","inputLength","toString","_h","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","_o","validateError","validationResult","_j","__values","_l","validateFunction","validateResult","getPath","pathWithIndex","isPrimitive","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","get","forEach","isOnBlur","isOnChange","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","substring","indexOf","getIsFieldsDifferent","referenceArray","differenceArray","i","dataA","dataB","isMatchFieldArrayName","searchName","names","some","mode","isOnSubmit","isOnAll","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","filterBooleanArray","appendId","keyName","generateId","mapIds","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","isSubmittedRef","touchedFieldsRef","readFormStateRef","reRender","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","React.useState","setInputStateValue","valueRef","React.useRef","onFocusRef","shouldValidate","skipValidation","commonTask","event","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","touched","onChange","_i","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","__assign","shouldRender","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","errorsRef","dirtyFieldsRef","isDirtyRef","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValues","validateSchemaIsValid","renderWatchedInputs","getValues","getDefaultValues","getFieldArrayParentName","memoizedDefaultValues","setField","allFields","getCurrentFieldsValues","appendValueWithKey","setFieldAndValidState","fieldsValues","shouldRenderFieldArray","dirtyFields","isDirty","resetFields","flagOrFields","reset","defaultValues","pop","shouldRenderUseWatch","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","append","remove","removeArrayAt","fieldIndex","isFound","isIndexUndefined","isLast","isCurrentIndex","currentFieldName","previousFieldName","has","insertAt","reValidateMode","resolver","context","shouldFocusError","shouldUnregister","criteriaMode","Set","watchFieldsHookRef","watchFieldsHookRenderRef","isValidRef","defaultValuesAtRenderRef","isUnMount","submitCountRef","isSubmittingRef","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","submitCount","isSubmitting","_k","shouldRenderBaseOnError","shouldReRender","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","isSameError","shouldRenderBasedOnError","previousError","setFieldValue","rawValue","radioRef","selectRef","selected","includes","checkboxRef","setDirty","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","isInputsValid","Promise","all","setInternalValues","setInternalValue","config","isFieldWatched","found","size","getFieldsValues","shouldSkipValidation","validateResolver","forceDelete","handleChange","mutationWatcher","fieldRef","options_1","removeAllEventListeners","disconnect","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isEmptyDefaultValue","onDetachCallback","observer","MutationObserver","observe","childList","subtree","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","isSelectInput","handleSubmit","callback","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","formState","commonProps","refOrValidationOptions","prop","watch","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","nameRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}